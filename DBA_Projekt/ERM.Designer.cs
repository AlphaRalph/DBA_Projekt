//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 03.10.2018 20:42:11
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Context
{

    [DatabaseAttribute(Name = "lva_liste_or_mapper")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class DataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAppointment(Appointment instance);
        partial void UpdateAppointment(Appointment instance);
        partial void DeleteAppointment(Appointment instance);
        partial void InsertRoom(Room instance);
        partial void UpdateRoom(Room instance);
        partial void DeleteRoom(Room instance);
        partial void InsertStudyprogram(Studyprogram instance);
        partial void UpdateStudyprogram(Studyprogram instance);
        partial void DeleteStudyprogram(Studyprogram instance);
        partial void InsertTeacher(Teacher instance);
        partial void UpdateTeacher(Teacher instance);
        partial void DeleteTeacher(Teacher instance);

        #endregion

        public DataContext() :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DataContext(MappingSource mappingSource) :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Appointment> Appointments
        {
            get
            {
                return this.GetTable<Appointment>();
            }
        }

        public Devart.Data.Linq.Table<Room> Rooms
        {
            get
            {
                return this.GetTable<Room>();
            }
        }

        public Devart.Data.Linq.Table<Studyprogram> Studyprograms
        {
            get
            {
                return this.GetTable<Studyprogram>();
            }
        }

        public Devart.Data.Linq.Table<Teacher> Teachers
        {
            get
            {
                return this.GetTable<Teacher>();
            }
        }
    }
}

namespace Context
{

    /// <summary>
    /// There are no comments for Context.Appointment in the schema.
    /// </summary>
    [Table(Name = @"lva_liste_or_mapper.Appointments")]
    public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int _SemsterNumber;

        private string _SemesterName;

        private System.DateTime _Beginning;

        private System.DateTime _Ending;

        private string _Type;

        private string _Identifikation;

        private int _TeacherID;

        private int _RoomID;

        private int _StudyprogramID;
        #pragma warning restore 0649

        private EntityRef<Room> _Room;

        private EntityRef<Studyprogram> _Studyprogram;

        private EntityRef<Teacher> _Teacher;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnSemsterNumberChanging(int value);
        partial void OnSemsterNumberChanged();
        partial void OnSemesterNameChanging(string value);
        partial void OnSemesterNameChanged();
        partial void OnBeginningChanging(System.DateTime value);
        partial void OnBeginningChanged();
        partial void OnEndingChanging(System.DateTime value);
        partial void OnEndingChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnIdentifikationChanging(string value);
        partial void OnIdentifikationChanged();
        partial void OnTeacherIDChanging(int value);
        partial void OnTeacherIDChanged();
        partial void OnRoomIDChanging(int value);
        partial void OnRoomIDChanged();
        partial void OnStudyprogramIDChanging(int value);
        partial void OnStudyprogramIDChanged();
        #endregion

        public Appointment()
        {
            this._Room  = default(EntityRef<Room>);
            this._Studyprogram  = default(EntityRef<Studyprogram>);
            this._Teacher  = default(EntityRef<Teacher>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "int(9) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SemsterNumber in the schema.
        /// </summary>
        [Column(Storage = "_SemsterNumber", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SemsterNumber
        {
            get
            {
                return this._SemsterNumber;
            }
            set
            {
                if (this._SemsterNumber != value)
                {
                    this.OnSemsterNumberChanging(value);
                    this.SendPropertyChanging();
                    this._SemsterNumber = value;
                    this.SendPropertyChanged("SemsterNumber");
                    this.OnSemsterNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SemesterName in the schema.
        /// </summary>
        [Column(Storage = "_SemesterName", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SemesterName
        {
            get
            {
                return this._SemesterName;
            }
            set
            {
                if (this._SemesterName != value)
                {
                    this.OnSemesterNameChanging(value);
                    this.SendPropertyChanging();
                    this._SemesterName = value;
                    this.SendPropertyChanged("SemesterName");
                    this.OnSemesterNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Beginning in the schema.
        /// </summary>
        [Column(Storage = "_Beginning", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Beginning
        {
            get
            {
                return this._Beginning;
            }
            set
            {
                if (this._Beginning != value)
                {
                    this.OnBeginningChanging(value);
                    this.SendPropertyChanging();
                    this._Beginning = value;
                    this.SendPropertyChanged("Beginning");
                    this.OnBeginningChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ending in the schema.
        /// </summary>
        [Column(Storage = "_Ending", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Ending
        {
            get
            {
                return this._Ending;
            }
            set
            {
                if (this._Ending != value)
                {
                    this.OnEndingChanging(value);
                    this.SendPropertyChanging();
                    this._Ending = value;
                    this.SendPropertyChanged("Ending");
                    this.OnEndingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Identifikation in the schema.
        /// </summary>
        [Column(Storage = "_Identifikation", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Identifikation
        {
            get
            {
                return this._Identifikation;
            }
            set
            {
                if (this._Identifikation != value)
                {
                    this.OnIdentifikationChanging(value);
                    this.SendPropertyChanging();
                    this._Identifikation = value;
                    this.SendPropertyChanged("Identifikation");
                    this.OnIdentifikationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TeacherID in the schema.
        /// </summary>
        [Column(Storage = "_TeacherID", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TeacherID
        {
            get
            {
                return this._TeacherID;
            }
            set
            {
                if (this._TeacherID != value)
                {
                    if (this._Teacher.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTeacherIDChanging(value);
                    this.SendPropertyChanging();
                    this._TeacherID = value;
                    this.SendPropertyChanged("TeacherID");
                    this.OnTeacherIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoomID in the schema.
        /// </summary>
        [Column(Storage = "_RoomID", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RoomID
        {
            get
            {
                return this._RoomID;
            }
            set
            {
                if (this._RoomID != value)
                {
                    if (this._Room.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoomIDChanging(value);
                    this.SendPropertyChanging();
                    this._RoomID = value;
                    this.SendPropertyChanged("RoomID");
                    this.OnRoomIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StudyprogramID in the schema.
        /// </summary>
        [Column(Storage = "_StudyprogramID", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int StudyprogramID
        {
            get
            {
                return this._StudyprogramID;
            }
            set
            {
                if (this._StudyprogramID != value)
                {
                    if (this._Studyprogram.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStudyprogramIDChanging(value);
                    this.SendPropertyChanging();
                    this._StudyprogramID = value;
                    this.SendPropertyChanged("StudyprogramID");
                    this.OnStudyprogramIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Room in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Room_Appointment", Storage="_Room", ThisKey="RoomID", OtherKey="ID", IsForeignKey=true)]
        internal Room Room
        {
            get
            {
                return this._Room.Entity;
            }
            set
            {
                Room previousValue = this._Room.Entity;
                if ((previousValue != value) || (this._Room.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Room.Entity = null;
                    }
                    this._Room.Entity = value;
                    if (value != null)
                    {
                        this._RoomID = value.ID;
                    }
                    else
                    {
                        this._RoomID = default(int);
                    }
                    this.SendPropertyChanged("Room");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Studyprogram in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Studyprogram_Appointment", Storage="_Studyprogram", ThisKey="StudyprogramID", OtherKey="ID", IsForeignKey=true)]
        internal Studyprogram Studyprogram
        {
            get
            {
                return this._Studyprogram.Entity;
            }
            set
            {
                Studyprogram previousValue = this._Studyprogram.Entity;
                if ((previousValue != value) || (this._Studyprogram.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Studyprogram.Entity = null;
                    }
                    this._Studyprogram.Entity = value;
                    if (value != null)
                    {
                        this._StudyprogramID = value.ID;
                    }
                    else
                    {
                        this._StudyprogramID = default(int);
                    }
                    this.SendPropertyChanged("Studyprogram");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Teacher in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Teacher_Appointment", Storage="_Teacher", ThisKey="TeacherID", OtherKey="ID", IsForeignKey=true)]
        internal Teacher Teacher
        {
            get
            {
                return this._Teacher.Entity;
            }
            set
            {
                Teacher previousValue = this._Teacher.Entity;
                if ((previousValue != value) || (this._Teacher.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Teacher.Entity = null;
                    }
                    this._Teacher.Entity = value;
                    if (value != null)
                    {
                        this._TeacherID = value.ID;
                    }
                    else
                    {
                        this._TeacherID = default(int);
                    }
                    this.SendPropertyChanged("Teacher");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.Room in the schema.
    /// </summary>
    [Table(Name = @"lva_liste_or_mapper.Rooms")]
    public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Building;

        private string _Type;

        private string _RoomName;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBuildingChanging(string value);
        partial void OnBuildingChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnRoomNameChanging(string value);
        partial void OnRoomNameChanged();
        #endregion

        public Room()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "int(9) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Building in the schema.
        /// </summary>
        [Column(Storage = "_Building", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Building
        {
            get
            {
                return this._Building;
            }
            set
            {
                if (this._Building != value)
                {
                    this.OnBuildingChanging(value);
                    this.SendPropertyChanging();
                    this._Building = value;
                    this.SendPropertyChanged("Building");
                    this.OnBuildingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoomName in the schema.
        /// </summary>
        [Column(Storage = "_RoomName", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RoomName
        {
            get
            {
                return this._RoomName;
            }
            set
            {
                if (this._RoomName != value)
                {
                    this.OnRoomNameChanging(value);
                    this.SendPropertyChanging();
                    this._RoomName = value;
                    this.SendPropertyChanged("RoomName");
                    this.OnRoomNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.Studyprogram in the schema.
    /// </summary>
    [Table(Name = @"lva_liste_or_mapper.Studyprograms")]
    public partial class Studyprogram : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _ProgramName;

        private int _ProgramNumber;

        private string _ProgramGraduate;

        private string _ProgramType;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnProgramNameChanging(string value);
        partial void OnProgramNameChanged();
        partial void OnProgramNumberChanging(int value);
        partial void OnProgramNumberChanged();
        partial void OnProgramGraduateChanging(string value);
        partial void OnProgramGraduateChanged();
        partial void OnProgramTypeChanging(string value);
        partial void OnProgramTypeChanged();
        #endregion

        public Studyprogram()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "int(9) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProgramName in the schema.
        /// </summary>
        [Column(Storage = "_ProgramName", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProgramName
        {
            get
            {
                return this._ProgramName;
            }
            set
            {
                if (this._ProgramName != value)
                {
                    this.OnProgramNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProgramName = value;
                    this.SendPropertyChanged("ProgramName");
                    this.OnProgramNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProgramNumber in the schema.
        /// </summary>
        [Column(Storage = "_ProgramNumber", CanBeNull = false, DbType = "int(9) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProgramNumber
        {
            get
            {
                return this._ProgramNumber;
            }
            set
            {
                if (this._ProgramNumber != value)
                {
                    this.OnProgramNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ProgramNumber = value;
                    this.SendPropertyChanged("ProgramNumber");
                    this.OnProgramNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProgramGraduate in the schema.
        /// </summary>
        [Column(Storage = "_ProgramGraduate", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProgramGraduate
        {
            get
            {
                return this._ProgramGraduate;
            }
            set
            {
                if (this._ProgramGraduate != value)
                {
                    this.OnProgramGraduateChanging(value);
                    this.SendPropertyChanging();
                    this._ProgramGraduate = value;
                    this.SendPropertyChanged("ProgramGraduate");
                    this.OnProgramGraduateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProgramType in the schema.
        /// </summary>
        [Column(Storage = "_ProgramType", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProgramType
        {
            get
            {
                return this._ProgramType;
            }
            set
            {
                if (this._ProgramType != value)
                {
                    this.OnProgramTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ProgramType = value;
                    this.SendPropertyChanged("ProgramType");
                    this.OnProgramTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Context.Teacher in the schema.
    /// </summary>
    [Table(Name = @"lva_liste_or_mapper.Teachers")]
    public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _FirstName;

        private string _LastName;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        #endregion

        public Teacher()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "int(9) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FirstName in the schema.
        /// </summary>
        [Column(Storage = "_FirstName", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Storage = "_LastName", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
